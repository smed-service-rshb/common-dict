/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.common.dict.controllers;

import ru.softlab.efr.common.dict.exchange.model.Bank;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Banks API
 */
public interface BanksApi {

    /**
     * Создание банка 
     * @param bank Данные о банке  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/banks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Bank> createBank(@Valid @RequestBody Bank bank) throws Exception;



    /**
     * Удаление банка 
     * @param id Идентификатор банка  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/banks/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBank(@PathVariable("id") Long id) throws Exception;



    /**
     * Редактирование банка 
     * @param id Идентификатор банка
     * @param bank Данные о банке  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/banks/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Bank> editBank(@PathVariable("id") Long id,@Valid @RequestBody Bank bank) throws Exception;



    /**
     * Возвращает информацию о банке 
     * @param id Идентификатор банка  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/banks/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Bank> getBank(@PathVariable("id") Long id) throws Exception;



    /**
     * Список банков 
     * @param bic БИК банка
     * @param name Наименование банка  
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/banks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<Bank>> listBanks(@PageableDefault(value = 50) Pageable pageable,  @Valid @RequestParam(value = "bic", required = false) String bic, @Valid @RequestParam(value = "name", required = false) String name) throws Exception;



    /**
     * Репликация банков   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/banks/replication",
        method = RequestMethod.POST)
    ResponseEntity<Void> replicationBanks() throws Exception;


}
