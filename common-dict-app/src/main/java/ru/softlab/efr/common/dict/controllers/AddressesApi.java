/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.common.dict.controllers;

import ru.softlab.efr.common.dict.exchange.model.Address;
import ru.softlab.efr.common.dict.exchange.model.House;
import ru.softlab.efr.common.dict.exchange.model.RegionRs;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Addresses API
 */
public interface AddressesApi {

    /**
     * Возвращает информацию об адресе 
     * @param id Идентификатор адреса  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/addresses/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Address> getAddress(@PathVariable("id") Long id) throws Exception;



    /**
     * Возвращает список родительских адресов 
     * @param id Идентификатор адреса  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/addresses/{id}/parents",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Address>> getParents(@PathVariable("id") Long id) throws Exception;



    /**
     * Возвращает список адресных объектов уровня 1   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/addresses/region/list",
        method = RequestMethod.GET)
    ResponseEntity<RegionRs> getRegionList() throws Exception;



    /**
     * Список адресов 
     * @param words Слова поиска
     * @param parentId Id родительской записи адреса, относительно которой производится поиск  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/addresses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Address>> listAddresses(@NotNull  @Valid @RequestParam(value = "words") String words, @Valid @RequestParam(value = "parentId", required = false) Long parentId) throws Exception;



    /**
     * Список строений 
     * @param id Id родительской записи адреса, относительно которой производится поиск строений
     * @param house Номер дома  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/addresses/{id}/houses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<House>> listHouses(@PathVariable("id") Long id, @Valid @RequestParam(value = "house", required = false) String house) throws Exception;



    /**
     * Репликация адресов и строений   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/addresses/replication",
        method = RequestMethod.POST)
    ResponseEntity<Void> replicationAddresses() throws Exception;



    /**
     * Обновление адресов и строений   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/addresses/update",
        method = RequestMethod.POST)
    ResponseEntity<Void> updateAddresses() throws Exception;


}
