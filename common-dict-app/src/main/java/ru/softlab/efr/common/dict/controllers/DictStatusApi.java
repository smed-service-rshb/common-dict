/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.common.dict.controllers;

import ru.softlab.efr.common.dict.exchange.model.CurrentDictRs;
import ru.softlab.efr.common.dict.exchange.model.DictStatus;
import ru.softlab.efr.common.dict.exchange.model.DictStatusRs;
import ru.softlab.efr.common.dict.exchange.model.FileDateForCurrentState;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the DictStatus API
 */
public interface DictStatusApi {

    /**
     * Получение идентификатора файла справочника по типу 
     * @param dictName Наименование справочника  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/currentDict",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CurrentDictRs> getCurrentDictIdByName(@NotNull  @Valid @RequestParam(value = "dictName") String dictName) throws Exception;



    /**
     * Получение текущего статуса процесса обновления/проверки справочников   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<DictStatus>> getDictStatus(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Получить дату загрузки справочника по которому проводилась проверка пользователя 
     * @param id update_id проверяемого пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/current-state/{id}/file-date",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FileDateForCurrentState> getFileDate(@PathVariable("id") Long id) throws Exception;



    /**
     * Сохранение текущего статуса процесса обновления/проверки справочников 
     * @param setDictStatusRq Тело запроса сохранения текущего статуса процесса обновления/проверки справочников  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/dictionaries/status",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DictStatusRs> setDictStatus(@Valid @RequestBody DictStatus setDictStatusRq) throws Exception;


}
