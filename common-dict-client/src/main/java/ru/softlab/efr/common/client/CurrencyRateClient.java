/*
 * API микросервиса общих справочников
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.common.client;

import ru.softlab.efr.common.dict.exchange.model.CurrencyCbRateRs;
import ru.softlab.efr.common.dict.exchange.model.CurrencyRateData;
import ru.softlab.efr.common.dict.exchange.model.CurrencyRateDataForList;
import ru.softlab.efr.common.dict.exchange.model.CurrencyRateSettings;
import ru.softlab.efr.common.dict.exchange.model.ShortCurrencyRateData;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением common-dict-app
 **/
@Component
public class CurrencyRateClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private static final String APPLICATION_NAME = "common-dict-app";
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public CurrencyRateClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
    }


    /**
     * Создать запись в справочнике курсов валют
     * POST /dictionaries/rates
     *
     * @param createRateRequest Запрос создания записи справочника (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void createCurrencyRate(CurrencyRateData createRateRequest, long timeout) throws RestClientException {
        return createCurrencyRate(createRateRequest).get(timeout);
    }

    /**
     * Создать запись в справочнике курсов валют асинхронно
     * POST /dictionaries/rates
     *
     * @param createRateRequest Запрос создания записи справочника (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> createCurrencyRate(CurrencyRateData createRateRequest) throws RestClientException {
        return new ClientRestResult<>(createCurrencyRateInternal(createRateRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> createCurrencyRateInternal(CurrencyRateData createRateRequest) throws RestClientException {
        if (createRateRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "createRateRequest", "createCurrencyRate"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/rates"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(createRateRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Получить активный курс валюты по идентификатору валюты
     * GET /dictionaries/currency/rate/active
     *
     * @param currencyId Идентификатор валюты (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Курс валюты
     * @throws RestClientException в случае неудачи
    */
    public ShortCurrencyRateData getActiveCurrencyRate(Long currencyId, long timeout) throws RestClientException {
        return getActiveCurrencyRate(currencyId).get(timeout);
    }

    /**
     * Получить активный курс валюты по идентификатору валюты асинхронно
     * GET /dictionaries/currency/rate/active
     *
     * @param currencyId Идентификатор валюты (required)
     * @return Курс валюты
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<ShortCurrencyRateData> getActiveCurrencyRate(Long currencyId) throws RestClientException {
        return new ClientRestResult<>(getActiveCurrencyRateInternal(currencyId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<ShortCurrencyRateData>> getActiveCurrencyRateInternal(Long currencyId) throws RestClientException {
        if (currencyId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "currencyId", "getActiveCurrencyRate"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/currency/rate/active"));

        if (currencyId != null)
            uriBuilder.param("currencyId", currencyId);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<ShortCurrencyRateData>(){});
    }

    /**
     * Получить список курсов валют по ЦБ РФ
     * GET /dictionaries/currency/rate/cb/
     *
     * @param literalIso ISO-код валюты (required)
     * @param startDate Дата, с которой необходимо получить курсы. Формат ДД.ММ.ГГГГ (required)
     * @param endDate Дата, по которую необходимо получить курсы. Формат ДД.ММ.ГГГГ (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Курс валюты
     * @throws RestClientException в случае неудачи
    */
    public CurrencyCbRateRs getCbCurrencyRateList(String literalIso, String startDate, String endDate, long timeout) throws RestClientException {
        return getCbCurrencyRateList(literalIso, startDate, endDate).get(timeout);
    }

    /**
     * Получить список курсов валют по ЦБ РФ асинхронно
     * GET /dictionaries/currency/rate/cb/
     *
     * @param literalIso ISO-код валюты (required)
     * @param startDate Дата, с которой необходимо получить курсы. Формат ДД.ММ.ГГГГ (required)
     * @param endDate Дата, по которую необходимо получить курсы. Формат ДД.ММ.ГГГГ (required)
     * @return Курс валюты
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CurrencyCbRateRs> getCbCurrencyRateList(String literalIso, String startDate, String endDate) throws RestClientException {
        return new ClientRestResult<>(getCbCurrencyRateListInternal(literalIso, startDate, endDate), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CurrencyCbRateRs>> getCbCurrencyRateListInternal(String literalIso, String startDate, String endDate) throws RestClientException {
        if (literalIso == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "literalIso", "getCbCurrencyRateList"));
        if (startDate == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "startDate", "getCbCurrencyRateList"));
        if (endDate == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "endDate", "getCbCurrencyRateList"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/currency/rate/cb/"));

        if (literalIso != null)
            uriBuilder.param("literalIso", literalIso);
        if (startDate != null)
            uriBuilder.param("startDate", startDate);
        if (endDate != null)
            uriBuilder.param("endDate", endDate);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CurrencyCbRateRs>(){});
    }

    /**
     * Получить данные курса по идентификатору записи в справочнике
     * GET /dictionaries/rate/{id}
     *
     * @param id Идентификатор записи справочника (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные курса
     * @throws RestClientException в случае неудачи
    */
    public CurrencyRateData getCurrencyById(Long id, long timeout) throws RestClientException {
        return getCurrencyById(id).get(timeout);
    }

    /**
     * Получить данные курса по идентификатору записи в справочнике асинхронно
     * GET /dictionaries/rate/{id}
     *
     * @param id Идентификатор записи справочника (required)
     * @return Данные курса
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CurrencyRateData> getCurrencyById(Long id) throws RestClientException {
        return new ClientRestResult<>(getCurrencyByIdInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CurrencyRateData>> getCurrencyByIdInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getCurrencyById"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/rate/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CurrencyRateData>(){});
    }

    /**
     * Получить постраничный список курсов валют для отображения в списке
     * GET /dictionaries/rates
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Постраничный вывод курсов валют
     * @throws RestClientException в случае неудачи
    */
    public RestPageImpl<CurrencyRateDataForList> getCurrencyRateList(Pageable pageable, long timeout) throws RestClientException {
        return getCurrencyRateList(pageable).get(timeout);
    }

    /**
     * Получить постраничный список курсов валют для отображения в списке асинхронно
     * GET /dictionaries/rates
     *
     * @return Постраничный вывод курсов валют
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<RestPageImpl<CurrencyRateDataForList>> getCurrencyRateList(Pageable pageable) throws RestClientException {
        return new ClientRestResult<>(getCurrencyRateListInternal(pageable), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<RestPageImpl<CurrencyRateDataForList>>> getCurrencyRateListInternal(Pageable pageable) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/rates"));

        addPageableParams(uriBuilder, pageable);
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<RestPageImpl<CurrencyRateDataForList>>(){});
    }

    /**
     * Получить насройки способа расчета курса валют
     * GET /dictionaries/rates/setting
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Ответ на запрос получения настроек способа расчета курса валют
     * @throws RestClientException в случае неудачи
    */
    public CurrencyRateSettings getCurrencyRateSetting(long timeout) throws RestClientException {
        return getCurrencyRateSetting().get(timeout);
    }

    /**
     * Получить насройки способа расчета курса валют асинхронно
     * GET /dictionaries/rates/setting
     *
     * @return Ответ на запрос получения настроек способа расчета курса валют
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CurrencyRateSettings> getCurrencyRateSetting() throws RestClientException {
        return new ClientRestResult<>(getCurrencyRateSettingInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CurrencyRateSettings>> getCurrencyRateSettingInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/rates/setting"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CurrencyRateSettings>(){});
    }

    /**
     * 
     * PUT /dictionaries/rate/{id}
     *
     * @param id Идентификатор записи справочника (required)
     * @param updateRateRequest Запрос обновления записи справочника (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные курса
     * @throws RestClientException в случае неудачи
    */
    public CurrencyRateData updateCurrencyRate(Long id, CurrencyRateData updateRateRequest, long timeout) throws RestClientException {
        return updateCurrencyRate(id, updateRateRequest).get(timeout);
    }

    /**
     *  асинхронно
     * PUT /dictionaries/rate/{id}
     *
     * @param id Идентификатор записи справочника (required)
     * @param updateRateRequest Запрос обновления записи справочника (required)
     * @return Данные курса
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CurrencyRateData> updateCurrencyRate(Long id, CurrencyRateData updateRateRequest) throws RestClientException {
        return new ClientRestResult<>(updateCurrencyRateInternal(id, updateRateRequest), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CurrencyRateData>> updateCurrencyRateInternal(Long id, CurrencyRateData updateRateRequest) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "updateCurrencyRate"));
        if (updateRateRequest == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "updateRateRequest", "updateCurrencyRate"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/rate/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(updateRateRequest);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CurrencyRateData>(){});
    }

    /**
     * Обновить настройки способа расчета курса валют
     * POST /dictionaries/rates/setting
     *
     * @param updateCurrencyRateSetting Данные с настройками способа расчета курса (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void updateCurrencyRateSetting(CurrencyRateSettings updateCurrencyRateSetting, long timeout) throws RestClientException {
        return updateCurrencyRateSetting(updateCurrencyRateSetting).get(timeout);
    }

    /**
     * Обновить настройки способа расчета курса валют асинхронно
     * POST /dictionaries/rates/setting
     *
     * @param updateCurrencyRateSetting Данные с настройками способа расчета курса (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> updateCurrencyRateSetting(CurrencyRateSettings updateCurrencyRateSetting) throws RestClientException {
        return new ClientRestResult<>(updateCurrencyRateSettingInternal(updateCurrencyRateSetting), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> updateCurrencyRateSettingInternal(CurrencyRateSettings updateCurrencyRateSetting) throws RestClientException {
        if (updateCurrencyRateSetting == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "updateCurrencyRateSetting", "updateCurrencyRateSetting"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/rates/setting"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(updateCurrencyRateSetting);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
