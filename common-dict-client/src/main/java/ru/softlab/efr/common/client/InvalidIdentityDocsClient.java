/*
 * API микросервиса общих справочников
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.common.client;

import ru.softlab.efr.common.dict.exchange.model.CheckInvalidIdentityDocRq;
import ru.softlab.efr.common.dict.exchange.model.CheckInvalidIdentityDocRs;
import ru.softlab.efr.common.dict.exchange.model.UpdateListStatus;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением common-dict-app
 **/
@Component
public class InvalidIdentityDocsClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private static final String APPLICATION_NAME = "common-dict-app";
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public InvalidIdentityDocsClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
    }


    /**
     * Проверка паспортных данных по справочнику недействительных паспортов
     * POST /dictionaries/invalididentitydoc/check
     *
     * @param checkInvalidIdentityDocRq Тело запроса проверки паспортных данных по справочнику недействительных паспортов (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public CheckInvalidIdentityDocRs checkInvalidIdentityDoc(CheckInvalidIdentityDocRq checkInvalidIdentityDocRq, long timeout) throws RestClientException {
        return checkInvalidIdentityDoc(checkInvalidIdentityDocRq).get(timeout);
    }

    /**
     * Проверка паспортных данных по справочнику недействительных паспортов асинхронно
     * POST /dictionaries/invalididentitydoc/check
     *
     * @param checkInvalidIdentityDocRq Тело запроса проверки паспортных данных по справочнику недействительных паспортов (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CheckInvalidIdentityDocRs> checkInvalidIdentityDoc(CheckInvalidIdentityDocRq checkInvalidIdentityDocRq) throws RestClientException {
        return new ClientRestResult<>(checkInvalidIdentityDocInternal(checkInvalidIdentityDocRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CheckInvalidIdentityDocRs>> checkInvalidIdentityDocInternal(CheckInvalidIdentityDocRq checkInvalidIdentityDocRq) throws RestClientException {
        if (checkInvalidIdentityDocRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "checkInvalidIdentityDocRq", "checkInvalidIdentityDoc"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/invalididentitydoc/check"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(checkInvalidIdentityDocRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CheckInvalidIdentityDocRs>(){});
    }

    /**
     * Получение текущего статуса процесса обновления справочника недействительных паспортов
     * GET /dictionaries/invalididentitydoc/status
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public UpdateListStatus getInvalidIdentityDocUpdateStatus(long timeout) throws RestClientException {
        return getInvalidIdentityDocUpdateStatus().get(timeout);
    }

    /**
     * Получение текущего статуса процесса обновления справочника недействительных паспортов асинхронно
     * GET /dictionaries/invalididentitydoc/status
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<UpdateListStatus> getInvalidIdentityDocUpdateStatus() throws RestClientException {
        return new ClientRestResult<>(getInvalidIdentityDocUpdateStatusInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<UpdateListStatus>> getInvalidIdentityDocUpdateStatusInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/invalididentitydoc/status"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<UpdateListStatus>(){});
    }

    /**
     * Запрос обновления списка недействительных паспортов
     * GET /dictionaries/invalididentitydoc/update
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public UpdateListStatus updateInvalidIdentityDocList(long timeout) throws RestClientException {
        return updateInvalidIdentityDocList().get(timeout);
    }

    /**
     * Запрос обновления списка недействительных паспортов асинхронно
     * GET /dictionaries/invalididentitydoc/update
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<UpdateListStatus> updateInvalidIdentityDocList() throws RestClientException {
        return new ClientRestResult<>(updateInvalidIdentityDocListInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<UpdateListStatus>> updateInvalidIdentityDocListInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/invalididentitydoc/update"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<UpdateListStatus>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
