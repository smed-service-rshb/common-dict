/*
 * API микросервиса общих справочников
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.common.client;

import ru.softlab.efr.common.dict.exchange.model.CheckBlockagesRq;
import ru.softlab.efr.common.dict.exchange.model.CheckBlockagesRs;
import org.springframework.core.io.Resource;
import ru.softlab.efr.common.dict.exchange.model.UpdateListStatus;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением common-dict-app
 **/
@Component
public class BlockagesClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private static final String APPLICATION_NAME = "common-dict-app";
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public BlockagesClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
    }


    /**
     * Проверка паспортных данных по справочнику блокировок/заморозок
     * POST /dictionaries/blockages/check
     *
     * @param checkBlockagesRq Тело запроса проверки паспортных данных по справочнику блокировок/заморозок (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public CheckBlockagesRs checkBlockages(CheckBlockagesRq checkBlockagesRq, long timeout) throws RestClientException {
        return checkBlockages(checkBlockagesRq).get(timeout);
    }

    /**
     * Проверка паспортных данных по справочнику блокировок/заморозок асинхронно
     * POST /dictionaries/blockages/check
     *
     * @param checkBlockagesRq Тело запроса проверки паспортных данных по справочнику блокировок/заморозок (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<CheckBlockagesRs> checkBlockages(CheckBlockagesRq checkBlockagesRq) throws RestClientException {
        return new ClientRestResult<>(checkBlockagesInternal(checkBlockagesRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<CheckBlockagesRs>> checkBlockagesInternal(CheckBlockagesRq checkBlockagesRq) throws RestClientException {
        if (checkBlockagesRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "checkBlockagesRq", "checkBlockages"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/blockages/check"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(checkBlockagesRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<CheckBlockagesRs>(){});
    }

    /**
     * Получение текущего статуса процесса обновления справочника блокировок/заморозок
     * GET /dictionaries/blockages/status
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public UpdateListStatus getBlockageUpdateStatus(long timeout) throws RestClientException {
        return getBlockageUpdateStatus().get(timeout);
    }

    /**
     * Получение текущего статуса процесса обновления справочника блокировок/заморозок асинхронно
     * GET /dictionaries/blockages/status
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<UpdateListStatus> getBlockageUpdateStatus() throws RestClientException {
        return new ClientRestResult<>(getBlockageUpdateStatusInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<UpdateListStatus>> getBlockageUpdateStatusInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/blockages/status"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<UpdateListStatus>(){});
    }

    /**
     * Запрос обновления списка блокировок/заморозок
     * GET /dictionaries/blockages/update
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public UpdateListStatus updateBlockageList(long timeout) throws RestClientException {
        return updateBlockageList().get(timeout);
    }

    /**
     * Запрос обновления списка блокировок/заморозок асинхронно
     * GET /dictionaries/blockages/update
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<UpdateListStatus> updateBlockageList() throws RestClientException {
        return new ClientRestResult<>(updateBlockageListInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<UpdateListStatus>> updateBlockageListInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/blockages/update"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<UpdateListStatus>(){});
    }

    /**
     * 
     * POST /dictionaries/blockages/update
     *
     * @param content XML файл-справочник заморозок/блокировок (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void uploadBlockages(Resource content, long timeout) throws RestClientException {
        return uploadBlockages(content).get(timeout);
    }

    /**
     *  асинхронно
     * POST /dictionaries/blockages/update
     *
     * @param content XML файл-справочник заморозок/блокировок (optional)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> uploadBlockages(Resource content) throws RestClientException {
        return new ClientRestResult<>(uploadBlockagesInternal(content), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> uploadBlockagesInternal(Resource content) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(APPLICATION_NAME)
            .path(cutComments("/dictionaries/blockages/update"));

        MultiValueMap<String, Object> multipartMap = new LinkedMultiValueMap<>();
        if (content != null){
           multipartMap.add("content", content);
        } 
        

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(multipartMap);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
